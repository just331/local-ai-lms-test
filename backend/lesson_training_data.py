answers = {
    "logic_programming": {
        "answer_set_programming_definition": {
            "correct": [
                "Answer Set Programming is a type of declarative programming focused on complex search problems, utilizing logic programming and nonmonotonic reasoning.",
                "ASP is a declarative paradigm that represents solutions as answer sets in logic programs.",
                "In Answer Set Programming, answers are found as 'answer sets' in a given logic program.",
                "ASP leverages nonmonotonic reasoning and logic programming to solve hard search problems.",
                "Answer Set Programming is about expressing problems declaratively, where answer sets represent solutions.",
                "In ASP, logic programs define search problems, and answer sets correspond to their solutions.",
                "Answer Set Programming uses answer sets for solutions, based on logic and nonmonotonic reasoning.",
                "ASP is a programming style where difficult search problems are solved using answer sets from logic programs.",
                "Answer Set Programming is built on logic programming, using nonmonotonic reasoning to find answer sets.",
                "ASP is a declarative approach that encodes problems as logic programs and solutions are their answer sets.",
            ],
            "partial": [
                "ASP is a kind of logic programming used for search problems.",
                "Answer Set Programming is a programming paradigm for finding solutions.",
                "ASP is about logic programs and answer sets.",
                "It is a declarative programming method.",
                "Answer Set Programming uses logic, but I'm not sure about answer sets.",
                "ASP solves problems using rules.",
                "It is a logic-based paradigm for computer science problems.",
                "ASP is a way to represent knowledge in logic programs.",
                "ASP is used to solve hard problems using logic.",
                "ASP is a type of programming that uses answer sets.",
            ],
            "nonsense": [
                "Answer Set Programming is a type of cooking technique.",
                "ASP means you always get an answer when you run a program.",
                "Answer Set Programming is another word for HTML.",
                "ASP is only used for math calculations.",
                "Answer Set Programming is a hardware component.",
                "ASP is a programming language like JavaScript.",
                "Answer Set Programming helps you bake a cake.",
                "ASP stands for Automated Software Processing.",
                "Answer Set Programming is a kind of animal.",
                "ASP is used for drawing pictures in code.",
            ],
        },
        "asp_ancestor_definition": {
            "correct": [
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % recursive case",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % base and recursive",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % both cases included",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % ASP definition",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % correct form",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % two rules",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % covers all ancestors",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % both rules shown",
                "ancestor(X,Y) :- parent(X,Y). ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % answer set programming",
            ],
            "partial": [
                "ancestor(X,Y) :- parent(X,Y).",
                "ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).",
                "ancestor(X,Y) :- parent(X,Z).",
                "ancestor(X,Y) :- ancestor(Z,Y).",
                "ancestor(X,Y) :- parent(X,Y). % only base case",
                "ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y). % only recursion",
                "ancestor(X,Y).",
                "ancestor(X,Y) :- ancestor(X,Y).",
                "ancestor(X,Y) :- parent(Y,X).",
                "ancestor(X,Z) :- parent(X,Y).",
            ],
            "nonsense": [
                "parent(X,Y) :- ancestor(X,Y).",
                "Dogs are animals.",
                "The sun rises in the east.",
                "ancestor(X,Y) :- likes(X,Y).",
                "ancestor(X,Y). % that's it",
                "This rule makes no sense.",
                "ancestor(X,Y) :- sibling(X,Y).",
                "ASP is about fast cars.",
                "Nothing to do with ancestors.",
                "I don't know the answer.",
            ],
        }
    },
    "numbers_functions_expressions": {
        "function_comprehension": {
            "correct": [
                "The addition operator is a function that takes two arguments and returns their sum, like 9 + 1 = 10.",
                "Addition is a function where + acts on two numbers (inputs) and gives their sum (output), e.g., 9 + 1 = 10.",
                "A function such as addition takes 9 and 1 and returns 10, with + being the function symbol.",
                "In mathematics, addition is a function: given 9 and 1, the function + returns 10.",
                "The function '+' acts on the inputs 9 and 1 to produce 10.",
                "Addition can be defined as a function that returns the sum of two numbers, e.g., 9 + 1 = 10.",
                "Addition is a function, where the operator + takes two numbers as input and outputs their sum.",
                "For 9 + 1 = 10, 9 and 1 are inputs, + is the function, and 10 is the value.",
                "The sum of 9 and 1 using + as a function results in 10.",
                "Addition is a function that adds two numbers, e.g., 9 + 1 = 10.",
            ],
            "partial": [
                "Addition uses + to add two numbers.",
                "You can add 9 and 1 to get 10.",
                "The addition operator works on two numbers.",
                "To add, use +.",
                "The answer to 9 + 1 is 10.",
                "Addition combines numbers.",
                "The function + gives a result.",
                "Addition is used for numbers.",
                "Adding is done with +.",
                "Addition is one way to get 10 from 9 and 1.",
            ],
            "nonsense": [
                "The alphabet comes after 9 and 1.",
                "Subtraction is the same as addition.",
                "Addition is a type of animal.",
                "10 minus 1 is 9.",
                "Addition is used to multiply numbers.",
                "Functions are not related to addition.",
                "9 and 1 make a new word.",
                "Addition has no result.",
                "This is a question about weather.",
                "I like bananas.",
            ],
        },
        "expression_comprehension": {
            "correct": [
                "The addition operator acts on 3 and 20 to give the value 23.",
                "Adding 3 and 20 with + results in 23.",
                "3 + 20 = 23, so the addition operator acts as a function here.",
                "The operator + combines 3 and 20 to produce 23.",
                "In the expression 3 + 20, the function is +, input is 3 and 20, output is 23.",
                "The function '+' acts on 3 and 20 and returns 23.",
                "The addition operator applied to 3 and 20 yields 23.",
                "The sum of 3 and 20 is 23, with + as the function.",
                "3 and 20 are inputs to the addition function, giving 23.",
                "The value 23 is produced by adding 3 and 20 using the operator +.",
            ],
            "partial": [
                "3 plus 20 is 23.",
                "The answer is 23.",
                "Adding gives 23.",
                "20 plus 3.",
                "3 + 20 equals 23.",
                "We add the numbers to get 23.",
                "Addition means adding two numbers.",
                "Adding two numbers together.",
                "Adding 3 and 20.",
                "3 and 20 together.",
            ],
            "nonsense": [
                "3 times 20 is 60.",
                "20 minus 3 is 17.",
                "The answer is blue.",
                "Addition is not possible.",
                "I like pizza.",
                "The operator is subtraction.",
                "3 and 20 are both odd numbers.",
                "Expression means drawing.",
                "The result is 10.",
                "This is about letters.",
            ],
        }
    },
    "fundamental_concepts_math_cs": {
        "roster_notation": {
            "correct": [
                "[4,9,24]",
                "[9,4,24]",
                "[24,9,4]",
                "[4,24,9]",
                "[9,24,4]",
                "[24,4,9]",
                "A set like [4,9,24] in any order.",
                "The set written as [24,4,9].",
                "[4,9,24] is an example.",
                "[9,24,4] is a roster notation.",
            ],
            "partial": [
                "[4,9]",
                "[9,24]",
                "[24,9]",
                "[4,24]",
                "Just the numbers 4, 9, 24.",
                "[4,9,24,30]",
                "[4,24]",
                "[9,4]",
                "[24,4]",
                "[4]",
            ],
            "nonsense": [
                "[1,2,3]",
                "Roster notation is a shopping list.",
                "The answer is apples.",
                "Roster notation means a list of colors.",
                "No numbers are given.",
                "[a,b,c]",
                "This is about names, not numbers.",
                "Roster means a group of people.",
                "Set notation is different from roster.",
                "Pizza is tasty.",
            ],
        },
        "natural_numbers_def": {
            "correct": [
                "Natural numbers are positive integers starting from 1: 1, 2, 3, ...",
                "Natural numbers are the whole numbers greater than zero.",
                "Natural numbers do not include zero.",
                "The set of natural numbers is 1, 2, 3, and so on.",
                "Natural numbers are counting numbers beginning at 1.",
                "They are nonnegative integers except zero.",
                "Natural numbers are 1, 2, 3, ... and so forth.",
                "The natural numbers start at 1 and increase by 1 each time.",
                "Natural numbers are all positive whole numbers.",
                "Numbers like 1, 2, 3, 4 are natural numbers.",
            ],
            "partial": [
                "Natural numbers start at 0.",
                "Natural numbers are nonnegative numbers.",
                "Natural numbers are 0, 1, 2, 3, ...",
                "Any number is natural.",
                "Natural numbers are positive numbers.",
                "Whole numbers are natural numbers.",
                "Natural numbers can include zero.",
                "Natural numbers include 0 and 1.",
                "Natural numbers are all numbers.",
                "Negative numbers are not natural numbers.",
            ],
            "nonsense": [
                "Natural numbers are fractions.",
                "Natural numbers are negative numbers.",
                "Natural numbers are vegetables.",
                "No such thing as natural numbers.",
                "Natural numbers are decimal values.",
                "Natural numbers are letters.",
                "0.5 is a natural number.",
                "Natural numbers are not used in math.",
                "I don't know what natural numbers are.",
                "Natural numbers are animals.",
            ],
        }
    }
}
